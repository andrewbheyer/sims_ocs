#!/usr/bin/env python
from __future__ import division
try:
    from ConfigParser import NoOptionError
except ImportError:
    from configparser import NoOptionError
from datetime import datetime
import logging
import os

from lsst.sims.ocs.configuration.sim_config import SimulationConfig
from lsst.sims.ocs.database.socs_db import SocsDatabase
from lsst.sims.ocs.kernel.simulator import Simulator
from lsst.sims.ocs.setup.prog_config import read_file_config
from lsst.sims.ocs.setup.log import configure_logging
from lsst.sims.ocs.setup.parser import create_parser
from lsst.sims.ocs.setup.tracking import Tracking
from lsst.sims.ocs.utilities.file_helpers import expand_path

def main(args):
    db = SocsDatabase(args.db_type, mysql_config_path=args.mysql_config_path,
                      sqlite_save_path=args.sqlite_save_dir)

    session_id = db.new_session(args.startup_comment)
    args.session_id = session_id

    configure_logging(args.log_path, args.session_id, verbose=args.verbose, debug=args.debug)

    tracking = Tracking(args.session_id, args.session_code, args.startup_comment)
    if args.track_session:
        if args.tracking_db is not None:
            tracking.opsim_tracking_url = args.tracking_db
        tracking.track_session()

    logger = logging.getLogger("opsim4")

    start_time = datetime.now()

    configuration = SimulationConfig()
    configuration.load(args.config)
    configuration.validate()

    sim = Simulator(args, configuration, db)
    sim.initialize()
    try:
        sim.run()
    finally:
        sim.finalize()

    if args.save_config:
        config_dir = "config_{}".format(args.session_id)
        if args.config_save_dir == '':
            args.config_save_dir = config_dir
        else:
            args.config_save_dir = expand_path(os.path.join(args.config_save_dir, config_dir))
            if not os.path.exists(args.config_save_dir):
                os.mkdir(args.config_save_dir)
        configuration.save(args.config_save_dir)
        logger.info("Finished saving survey configuration")

    end_time = datetime.now()
    run_time = (end_time - start_time).total_seconds()
    logger.info("Total running time = {:.2f} seconds".format(run_time))
    if args.track_session:
        tracking.update_session("Simulation finished successfully in {:.2f} seconds".format(run_time))

if __name__ == "__main__":
    parser = create_parser()
    args = parser.parse_args()
    # Handling weird issue with the startup comment argument.
    if isinstance(args.startup_comment, list):
        args.startup_comment = " ".join(args.startup_comment)

    # Use DB configuration file to setup program arguments.
    db_conf = read_file_config()
    if db_conf is not None:
        args.db_type = db_conf.get("Database", "type")
        try:
            args.sqlite_save_dir = db_conf.get(args.db_type, "save_directory")
        except NoOptionError:
            pass
        try:
            args.mysql_config_path = db_conf.get(args.db_type, "config_path")
        except NoOptionError:
            pass

    main(args)
